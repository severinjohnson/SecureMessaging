from Crypto.Util.number import getPrime, inverse

def decrypt(private_key, hex_ciphertext):
    # Convert the hex ciphertext to an integer
    ciphertext = int(hex_ciphertext, 16)

    d, n = private_key
    # Decrypting using pow, which performs modular exponentiation, a key RSA operation.
    decrypted_msg = pow(ciphertext, d, n)

    # Convert the decrypted integer back to bytes
    decrypted_bytes = decrypted_msg.to_bytes((decrypted_msg.bit_length() + 7) // 8, 'big')

    # Attempt to decode the bytes to UTF-8 text
    try:
        plaintext = decrypted_bytes.decode('utf-8')
        return plaintext
    except UnicodeDecodeError:
        # If decoding fails, return the raw bytes or a message indicating the issue.
        # This is useful if the original encrypted message was not text, but binary data.
        return "Decoding Error: Original data might not be text."

# Example usage
private_key = (9770298448894227207603513621168938298464034312740227096450462826492543679107453119963159126005326560328097419177529705832911536032308941910336801449994723519854307625164189205147280827314326385393974420379216539792449279804287863428476249943659241720653511535660374942483012588363781623532097585842419199741950206601040574922191724826604832771842863229758732279305699832420759987618868899786602451754326919652871601829189466701892277609524707576206366563324051308088802652677294592938132894573750949963061127656790261302633681332149767812169610322402192749356079240594071182232131510627080267587464471011571211509865, 16593227330202414379867616994235370423344409462646253160747207293784286586790669753635117770375264629407927662303707386332154845602358991577334031890650294004008700894824573529703732762696597691558861374702446665328921414147389507515407188384192275639339427959070563958783829485179640733406490955540558892262007517643968743801784908509994813275420625458067475262301400184143153662399227306025995711809057720006289177866650383014234910493524295836005603973546942716199197622828994921850705555801848395930999861985646402023752785048322099994671409204000947624461126931790038841711072623976154007168199266399591354907527)
encrypted_hex = "1be668e814eb8aafa641a25e3d3139efeba401d0c58a98227c29cb050070765d9527864828d10a369b191c15baa256c447b0d53a4b4e8a109527d89e403da7460a85b4d2d90a415845afbe015769d845f1746c1b7af97a52677f04bf33227359a1180ad0c12028c951024a91b4d32c67a84737da7787484ae50512408b0458efab81bb440a70797412985cad268f23aa477fa98525957d2b70046a2c4bccfae3fb8dd5cb3541133086aa8d0cee441c6df64b037fce654de1f1449cd4272f9c0fbc7bfab32178cb369386e53093d9331239c722e2ab5adfa5aae0f92bc5d1bf7a6b0e931fb17af0102caae1035bd820f73903e05a9cdad4e49c33aee55ff01a84"

decrypted_message = decrypt(private_key, encrypted_hex)
print(decrypted_message)