from Crypto.Util.number import getPrime, inverse

def generate_keypair(keysize):
    p = getPrime(keysize // 2)
    q = getPrime(keysize // 2)
    n = p * q

    phi = (p-1) * (q-1)  # Euler's totient function for n because p and q are co-prime

    e = 65537  # Common e value

    # Finding mod inverse of e
    d = inverse(e, phi)

    return ((e, n), (d, n))

def encrypt(public_key, plaintext):
    e, n = public_key

    # Converting a text message into numbers using UTF-8
    message_int = int.from_bytes(plaintext.encode('utf-8'), 'big')

    encrypted_msg = pow(message_int, e, n)
    return encrypted_msg

def decrypt(private_key, hex_ciphertext):
    # Convert the hex ciphertext to an integer
    ciphertext = int(hex_ciphertext, 16)

    d, n = private_key
    # Decrypting using pow, which performs modular exponentiation, a key RSA operation.
    decrypted_msg = pow(ciphertext, d, n)

    # Convert the decrypted integer back to bytes
    decrypted_bytes = decrypted_msg.to_bytes((decrypted_msg.bit_length() + 7) // 8, 'big')

    # Attempt to decode the bytes to UTF-8 text
    try:
        plaintext = decrypted_bytes.decode('utf-8')
        return plaintext
    except UnicodeDecodeError:
        # If decoding fails, return the raw bytes or a message indicating the issue.
        # This is useful if the original encrypted message was not text, but binary data.
        return "Decoding Error: Original data might not be text."

# Example usage
private_key = (17354262549198234930422680501460311551326554347018616112430493364212072758298622185161078091379463156169003199217259385122150315476426412612132524459085850517343168984247201744104774255652515804626208488835336700460913347561839713451856411826203887965843640433977042918063301840899720203356467541845532048644923603078752534092135414530729060886458524622343594334930744015061585081151934804085445021388377641475758837826673267443657738284336768752936912134758351555136344661906037318979596936609557703289686686356963579710205938303770628437582491318058447553671113234591169501718484147115250048308759728770941920272641, 20580238576411492520177895411555523272642016362198882530406001078647340264197611503852445984270698408834828508017905477756774124663045704316758274020612141454746657240167357786323729559798402726689849191748723605567944377156200949994468617216522948132916449462969626913019589836910917830185524270590811991025958677855014048692336903212233880189649016598448785813341571131896323624514219689412503154729023416641264214644867848136930348729859072814289383987373073364144536322381305476242805185941100689017357937110380835399274090968253138609764795630164715654978480650257961780512160838505965016572249375590947122096071)
encrypted_hex = "83bda3bed38d0704e368b2cfb3ef4074a055942a428f1d44bcc0d6fa56c5773be1231d325c8cd918c89d7c9197ff9757a2d411c58b0f3e0042ae7850420edbd1cfffa30e89cdcab4333f33315b598143da72a970d4d025e27284184c65ca42d191a7f723946e39ca34b5dc5f6d66f11ffe06d99c802158d714c6ca0231159faf71161ae77105c4ac347fc4f8301d7a5045c5f89eeded4bdf6913c97b792012d95968ffa270abf7b1541fa6062bcf1df1902744b5908742c7b463af88ea85d357a3f19bd183581154c3a629bf6974b660eb0ca451706577389a1e35d2515de0724eccecae978f4350f50926ab1d47c8e3a3170edccadad0f5c8ecbf91541064f5"

decrypted_message = decrypt(private_key, encrypted_hex)
print(decrypted_message)
